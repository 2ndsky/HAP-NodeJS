{
  "name": "eibd",
  "version": "0.2.0",
  "description": "node eibd client",
  "main": "./index",
  "repository": {
    "type": "git",
    "url": "https://github.com/andreek/node-eibd"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "bin": {
    "groupread": "./bin/groupread",
    "groupsocketlisten": "./bin/groupsocketlisten",
    "groupswrite": "./bin/groupswrite",
    "groupwrite": "./bin/groupwrite"
  },
  "devDependencies": {
    "mocha": "*"
  },
  "author": {
    "name": "Andree Klattenhoff"
  },
  "scripts": {
    "test": "mocha -R list ./test"
  },
  "licenses": [
    {
      "type": "GPL",
      "url": "http://github.com/andreek/node-eibd/LICENSE"
    }
  ],
  "readme": "# eibd [![Build Status](https://secure.travis-ci.org/andreek/node-eibd.png?branch=master)](http://travis-ci.org/andreek/node-eibd)\n\nA Node.js client for eib/knx daemon. Implements all functions of eibd client library needed for groupswrite/groupwrite, groupread and groupsocketlisten.\n\n## Install\n\nnpm install eibd\n\n## Test\n  \nnpm test\n\n## Supported Datatypes\n\n * EIS 1 / DPT 1.xxx\n * EIS 2 / DPT 3.xxx\n * EIS 3 / DPT 10.xxx\n * EIS 4 / DPT 11.xxx\n * EIS 5 / DPT 9.xxx\n * EIS 6 / DPT 5.xxx\n * EIS 8 / DPT 2.xxx\n * EIS 9 / DPT 14.xxx\n * EIS 10.000 / DPT 7.xxx\n * EIS 10.001 / DPT 8.xxx\n * EIS 11 / DPT 12.xxx\n * EIS 11.001 / DPT 3.xxx\n * EIS 13 / DPT 4.xxx\n * EIS 14 / DPT 6.xxx\n * EIS 15 / DPT 16.xxx\n\n## CLI Usage\n\n### groupwrite\n  \n./bin/groupwrite host port x/x/x 0..255\n\n### groupswrite\n  \n./bin/groupswrite host port x/x/x 0..1\n\n### groupread\n\n./bin/groupread host port x/x/x\n\n### Listening for group telegrams\n\n./bin/groupsocketlisten host port\n\n## API\n\n### Connection.socketRemote(opts, callback)\n\nOpens a connection eibd over TCP/IP. \n\n```javascript\nvar opts = {\n  host: 'localhost',\n  port: 6720\n};\n\neibd.socketRemote(opts, function() {\n  // connected\n});\n```\n\n### Connection.openGroupSocket(writeOnly, callback)\n\nOpens a Group communication interface\n\n```javascript\neibd.on('data', function(action, src, dest, val) {\n  // do something\n});\n\neibd.openGroupSocket(0);\n```\n\n### Connection.openTGroup(dest, writeOnly, callback)\n\nOpens a connection of type T_Group\n\n```javascript\nvar dest = eibd.str2addr('x/x/x');\neibd.openTGroup(dest, 1, function(err) {\n\n});\n```\n\n### Connection.sendAPDU(data, callback)\n\nSends an APDU\n\n### Connection.sendRequest(data, callback)\n\nSends TCP/IP request to eib-daemon\n\n### Parser.parseTelegram(telegram)\n\nParse telegram and emits 'write', 'response' or 'read' events.\n\n### Parser.parseValue(len, telegram)\n\nTry to parse values with assumptions about package len.\n\n### Parse.encodeEIS5(buffer)\n\nParse value to EIS 5 / DPT 9.xxx from buffer\n\n### str2addr(str);\n\nEncodes string to knx address\n\n### addr2str(adr, gad=true/false);\n\nDecodes knx address to string\n\n## Example\n```javascript\nvar eibd = require('eibd');\n/**\n * groupsocketlisten\n */\nfunction groupsocketlisten(opts, callback) {\n\n  var conn = eibd.Connection();\n\n  conn.socketRemote(opts, function() {\n    \n    conn.openGroupSocket(0, callback);\n\n  });\n\n}\n\nvar host = 'localhost';\nvar port = 6720;\n\ngroupsocketlisten({ host: host, port: port }, function(parser) {\n\n  parser.on('write', function(src, dest, val){\n    console.log('Write from '+src+' to '+dest+': '+val);\n  });\n\n  parser.on('response', function(src, dest, val) {\n    console.log('Response from '+src+' to '+dest+': '+val);\n  });\n  \n  parser.on('read', function(src, dest) {\n    console.log('Read from '+src+' to '+dest);\n  });\n\n});\n```\n\n## eibd documentation\n\n * http://switch.dl.sourceforge.net/project/bcusdk/sdkdoc/sdkdoc-0.0.5.pdf\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/andreek/node-eibd/issues"
  },
  "_id": "eibd@0.2.0",
  "dist": {
    "shasum": "c5fedb4858191232b695e3a35952b0a533428afc"
  },
  "_from": "eibd@",
  "_resolved": "http://registry.npmjs.org/eibd/-/eibd-0.2.0.tgz"
}
