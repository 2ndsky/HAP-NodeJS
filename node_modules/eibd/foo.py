def toBigInt(raw):
  c=0
  res = 0
  rawlen= len(raw)-1
  for octet in range(rawlen+1):
    res += raw[rawlen -octet] << (c * 8)
    c += 1
  return res

def decodeDPT9(raw):
    ## 2 Byte Float
    ## SEEEEMMM MMMMMMMM
    ## S Sign (0/1)
    ## E Exponent (0..15)
    ## M Mantisse (-2048 ... 2047)
    ## For all Datapoint Types 9.xxx, the encoded value 7FFFh shall always be used to denote invalid data.
    val = toBigInt(raw)
    sign = (val & 0x8000) >> 15
    exp = (val & 0x7800) >> 11
    mant = val & 0x07ff
    if sign <> 0:
        mant = -(~(mant - 1) & 0x07ff) 
    print("DPT9: value: %d sign: %d exp: %d mant: %f" % (val, sign,exp,mant))
    return (1 << exp) * 0.01 * mant

print(decodeDPT9([0xa1, 0x43]));
print(decodeDPT9([0x0c, 0xdc]));
